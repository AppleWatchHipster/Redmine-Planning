function replaceWithDynamicSelectors( staticId, staticName )
{
    new DynamicIssueList( staticId, staticName );
}

/****************************************************************************\
 * LIST CONSTRUCTION
\****************************************************************************/

/* Replace a single SELECT list for issue selection with a series of
 * dynamic lists, broken down into customers, projects and issues. If
 * the selection in the customer list changes, the project list is
 * updated with all projects related to the selected customer present
 * and selected. In turn, changes to project selections are echoed in
 * a issue selector.
 *
 * Pass the ID and name of the select list to replace. The final issue
 * selector generated by the function will share the same ID and name.
 * You must render partial "shared/structured_issueInfo" to generate
 * the JS representation of the issue list before calling.
 */

function DynamicIssueList( staticId, staticName )
{
    /* References to the three dynamically created SELECT lists */

    this.projectList  = null;
    this.issueList     = null;

    /* Issue data related to each project added into the project list */

    this.projectIndexData = null;

    /* Find the selection list and remove it */

    var replaceMe = document.getElementById( staticId );
    var parent    = replaceMe.parentNode;

    parent.removeChild( replaceMe );

    try
    {
        /* Create empty selection lists for the project and issue, then call
         * helper functions for each to set them up in their default "empty"
         * state.
         */

        this.projectList          = document.createElement( 'select' );
        this.projectList.id       = 'dynamic_project_list_' + staticId;
        this.projectList.multiple = true;

        this.projectList.addEventListener( 'change', this, false );
        this.clearProjects();

        parent.appendChild( this.projectList );
        addSeparator( parent );

        this.issueList          = document.createElement( 'select' );
        this.issueList.id       = staticId;
        this.issueList.name     = staticName;
        this.issueList.multiple = true;

        this.clearIssues();

        parent.appendChild( this.issueList );

        /* In case any items were selected in the customer list, call the
         * on-change code now.
         */

        this.customersChanged( true );
    }
    catch( e )
    {
        /* If anything goes wrong, assume the browser doesn't understand some
         * of the code above and restore the original document instead.
         */

        removeChildren( parent );
        parent.appendChild( replaceMe );
    }
}

/****************************************************************************\
 * EVENT LISTENERS
\****************************************************************************/

/* Central event listener - call out to dedicated handler methods */

DynamicIssueList.prototype.handleEvent = function( event )
{
    this.projectsChanged  ( event );
}

/* Handle selection changes in the list of projects; as with
 * customersChanged, pass 'true' if wishing to select items based on the
 * selected issues in 'issueSel'.
 */

DynamicIssueList.prototype.projectsChanged = function( eventOrBoolean )
{
    var length            = this.projectIndexData.length;
    var selectedIndexData = [];

    for ( var i = 0; i < length; i ++ )
    {
        if ( this.projectList.options[ i ].selected ) selectedIndexData.push( this.projectIndexData[ i ] );
    }

    /* Empty the issue list or populate it? */

    length = selectedIndexData.length;

    if ( length == 0 )
    {
        this.clearIssues();
    }
    else
    {
        removeChildren( this.issueList );
        this.issueList.disabled = false;

        for ( var i = 0; i < length; i ++ )
        {
            var indexData     = selectedIndexData[ i ];
            var project       = projects[ indexData.projectId ];
            var projectTitle  = project.title;
            var issues         = project.issues;
            var items         = []
            var itemsLength;

            /* Sort the issue list by issue code within each project */

            for ( var issueId in issues )
            {
                var issueTitle = issues[ issueId ].title
                var issueCode  = issues[ issueId ].code

                items.push( new ItemInfo( issueTitle, issueId, issueCode ) );
            }

            items.sort( ItemInfo.sortByCode );
            itemsLength = items.length;

            /* Add a disabled OPTION showing the project name */

            appendOption( this.issueList, projectTitle + ":" );

            /* Now add an OPTION element for each issue */

            for ( var j = 0; j < itemsLength; j ++ )
            {
                var issueId      = items[ j ].id;
                var issueTitle   = items[ j ].title;
                var option      = document.createElement( 'option' );

                option.value    = issueId;
                option.selected = eventOrBoolean == true
                                ? issueIsSelected( indexData.projectId, issueId )
                                : true;

                option.appendChild( document.createTextNode( issueTitle ) );
                this.issueList.appendChild( option );
            }
        }
    }

    this.resizeLists();
}

/****************************************************************************\
 * LIST MANAGEMENT
\****************************************************************************/

/* Helper function which clears out the project selection list */

DynamicIssueList.prototype.clearProjects = function()
{
    this.projectList.disabled = true;
    removeChildren( this.projectList );
    appendOption( this.projectList, 'Select a customer' );
}

/* Helper function which clears out the issue selection list */

DynamicIssueList.prototype.clearIssues = function()
{
    this.issueList.disabled = true;
    removeChildren( this.issueList );
    appendOption( this.issueList, 'Select a project' );
}

/* Set the size of all SELECT lists to the maximum of the recommended
 * value for each. Individual list heights should not differ because
 * browsers are a pain and seem to steadfastly ignore all requests to
 * align the lists to their top edges, instead anchoring them at the
 * base, which looks terrible and makes item selection difficult since
 * (with mouse navigation) a list you just clicked in may move.
 */

DynamicIssueList.prototype.resizeLists = function()
{
    this.projectList.size = this.issueList.size = Math.max
    (
        sizeList( this.projectList  ),
        sizeList( this.issueList     )
    );

    /* Return a suggested value for the 'size' property of a given SELECT
     * list based on the number of OPTION elements within it.
     */

    function sizeList( list )
    {
        var items = list.options.length;

        if ( items < 3 ) items = 3;
        else if ( items > 30 ) items = 30;

        return items;
    }
}

/****************************************************************************\
 * DOCUMENT MANIPULATION
\****************************************************************************/

/* Helper function which adds a separator element to go between selection
 * lists to the given parent.
 */

function addSeparator( parent )
{
    parent.appendChild( document.createTextNode( ' ' ) );
}

/* Helper function which removes all children of the given parent */

function removeChildren( parent )
{
    while ( parent.firstChild ) parent.removeChild( parent.firstChild );
}

/* Helper function which creates a disabled OPTION tag, appending it to
 * the given parent, containing the given text.
 */

function appendOption( parent, text )
{
    var option      = document.createElement( 'option' );
    option.value    = '';
    option.disabled = true;
    option.appendChild( document.createTextNode( text ) );
    parent.appendChild( option );
}

/****************************************************************************\
 * SEARCH FUNCTIONS
\****************************************************************************/

/* Finder functions - search a given list ("this.issueList" or, more commonly,
 * "issueSel"), for a given ID. Followed by functions which find an issue given a
 * project ID.
 */

function isSelected( list, findId )
{
    for( var id in list )
    {
        if ( id == findId ) return true;
    }

    return false;
}


/* See comments above */

function projectIsSelected( findProjectId )
{
    return isSelected( issueSel.projects, findProjectId );
}

/* See comments above */

function issueIsSelected( customerId, projectId, findIssueId )
{
    return isSelected( issueSel.projects[ projectId ].issues, findIssueId );
}

/****************************************************************************\
 * INFORMATION ENCAPSULATION
\****************************************************************************/

/* Small object which stores title, ID and optional code for an item */

ItemInfo = function( title, id, code )
{
    this.title = title;
    this.id    = id;
    this.code  = code;
}

/* Class function which can be passed to Array.sort() - sorts by title */

ItemInfo.sort = function( a, b )
{
    if      ( a.title < b.title ) return -1;
    else if ( a.title > b.title ) return 1;
    else return 0;
}

/* Class function which can be passed to Array.sort() - sorts by code */

ItemInfo.sortByCode = function( a, b )
{
    if      ( a.code < b.code ) return -1;
    else if ( a.code > b.code ) return 1;
    else return 0;
}
